// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XilinxSupportLib.SystemSharp.Interop.Xilinx.AXI
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AXIMasterTop : AXIMasterTopBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n------------------------------------------------------------------------------\r" +
                    "\n-- ");
            
            #line 7 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.TopEntityName));
            
            #line default
            #line hidden
            this.Write(@".vhd - entity/architecture pair
------------------------------------------------------------------------------
-- IMPORTANT:
-- DO NOT MODIFY THIS FILE EXCEPT IN THE DESIGNATED SECTIONS.
--
-- SEARCH FOR --USER TO DETERMINE WHERE CHANGES ARE ALLOWED.
--
-- TYPICALLY, THE ONLY ACCEPTABLE CHANGES INVOLVE ADDING NEW
-- PORTS AND GENERICS THAT GET PASSED THROUGH TO THE INSTANTIATION
-- OF THE USER_LOGIC ENTITY.
------------------------------------------------------------------------------
--
------------------------------------------------------------------------------
-- Filename:          ");
            
            #line 20 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.TopEntityName));
            
            #line default
            #line hidden
            this.Write(".vhd\r\n-- Version:           ");
            
            #line 21 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.Version));
            
            #line default
            #line hidden
            this.Write("\r\n-- Description:       Top level design, instantiates library components and use" +
                    "r logic.\r\n-- Date:              ");
            
            #line 23 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.CreationDate));
            
            #line default
            #line hidden
            this.Write("\r\n-- VHDL Standard:     VHDL\'93\r\n------------------------------------------------" +
                    "------------------------------\r\n-- Naming Conventions:\r\n--   active low signals:" +
                    "                    \"*_n\"\r\n--   clock signals:                         \"clk\", \"c" +
                    "lk_div#\", \"clk_#x\"\r\n--   reset signals:                         \"rst\", \"rst_n\"\r\n" +
                    "--   generics:                              \"C_*\"\r\n--   user defined types:     " +
                    "               \"*_TYPE\"\r\n--   state machine next state:              \"*_ns\"\r\n-- " +
                    "  state machine current state:           \"*_cs\"\r\n--   combinatorial signals:    " +
                    "             \"*_com\"\r\n--   pipelined or register delay signals:   \"*_d#\"\r\n--   c" +
                    "ounter signals:                       \"*cnt*\"\r\n--   clock enable signals:       " +
                    "           \"*_ce\"\r\n--   internal version of output port:       \"*_i\"\r\n--   devic" +
                    "e pins:                           \"*_pin\"\r\n--   ports:                          " +
                    "       \"- Names begin with Uppercase\"\r\n--   processes:                          " +
                    "   \"*_PROCESS\"\r\n--   component instantiations:              \"<ENTITY_>I_<FUNC>\"\r" +
                    "\n------------------------------------------------------------------------------\r" +
                    "\n\r\nlibrary ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.std_logic_arith.all;\r\nu" +
                    "se ieee.std_logic_unsigned.all;\r\n\r\n---------------------------------------------" +
                    "---------------------------------\r\n-- Entity section\r\n--------------------------" +
                    "----------------------------------------------------\r\n-- Definition of Generics:" +
                    "\r\n--   C_S_AXI_DATA_WIDTH           -- \r\n--   C_S_AXI_ADDR_WIDTH           -- \r\n" +
                    "--   C_S_AXI_MIN_SIZE             -- \r\n--   C_USE_WSTRB                  -- \r\n--" +
                    "   C_DPHASE_TIMEOUT             -- \r\n--   C_BASEADDR                   -- AXI4LI" +
                    "TE slave: base address\r\n--   C_HIGHADDR                   -- AXI4LITE slave: hig" +
                    "h address\r\n--   C_FAMILY                     -- \r\n--   C_NUM_REG                " +
                    "    -- Number of software accessible registers\r\n--   C_NUM_MEM                  " +
                    "  -- Number of address-ranges\r\n--   C_SLV_AWIDTH                 -- Slave interf" +
                    "ace address bus width\r\n--   C_SLV_DWIDTH                 -- Slave interface data" +
                    " bus width\r\n--   C_M_AXI_ADDR_WIDTH           -- Master-Intf address bus width\r\n" +
                    "--   C_M_AXI_DATA_WIDTH           -- Master-Intf data bus width\r\n--   C_MAX_BURS" +
                    "T_LEN              -- Max no. of data-beats allowed in burst\r\n--   C_NATIVE_DATA" +
                    "_WIDTH          -- Internal bus width on user-side\r\n--   C_LENGTH_WIDTH         " +
                    "      -- Master interface data bus width\r\n--   C_ADDR_PIPE_DEPTH            -- D" +
                    "epth of Address pipelining\r\n--\r\n-- Definition of Ports:\r\n--   S_AXI_ACLK        " +
                    "           -- \r\n--   S_AXI_ARESETN                -- \r\n--   S_AXI_AWADDR        " +
                    "         -- \r\n--   S_AXI_AWVALID                -- \r\n--   S_AXI_WDATA           " +
                    "       -- \r\n--   S_AXI_WSTRB                  -- \r\n--   S_AXI_WVALID            " +
                    "     -- \r\n--   S_AXI_BREADY                 -- \r\n--   S_AXI_ARADDR              " +
                    "   -- \r\n--   S_AXI_ARVALID                -- \r\n--   S_AXI_RREADY                " +
                    " -- \r\n--   S_AXI_ARREADY                -- \r\n--   S_AXI_RDATA                  -" +
                    "- \r\n--   S_AXI_RRESP                  -- \r\n--   S_AXI_RVALID                 -- " +
                    "\r\n--   S_AXI_WREADY                 -- \r\n--   S_AXI_BRESP                  -- \r\n" +
                    "--   S_AXI_BVALID                 -- \r\n--   S_AXI_AWREADY                -- \r\n--" +
                    "   m_axi_aclk                   -- \r\n--   m_axi_aresetn                -- \r\n--  " +
                    " md_error                     -- \r\n--   m_axi_arready                -- \r\n--   m" +
                    "_axi_arvalid                -- \r\n--   m_axi_araddr                 -- \r\n--   m_a" +
                    "xi_arlen                  -- \r\n--   m_axi_arsize                 -- \r\n--   m_axi" +
                    "_arburst                -- \r\n--   m_axi_arprot                 -- \r\n--   m_axi_a" +
                    "rcache                -- \r\n--   m_axi_rready                 -- \r\n--   m_axi_rva" +
                    "lid                 -- \r\n--   m_axi_rdata                  -- \r\n--   m_axi_rresp" +
                    "                  -- \r\n--   m_axi_rlast                  -- \r\n--   m_axi_awready" +
                    "                -- \r\n--   m_axi_awvalid                -- \r\n--   m_axi_awaddr   " +
                    "              -- \r\n--   m_axi_awlen                  -- \r\n--   m_axi_awsize     " +
                    "            -- \r\n--   m_axi_awburst                -- \r\n--   m_axi_awprot       " +
                    "          -- \r\n--   m_axi_awcache                -- \r\n--   m_axi_wready         " +
                    "        -- \r\n--   m_axi_wvalid                 -- \r\n--   m_axi_wdata            " +
                    "      -- \r\n--   m_axi_wstrb                  -- \r\n--   m_axi_wlast              " +
                    "    -- \r\n--   m_axi_bready                 -- \r\n--   m_axi_bvalid               " +
                    "  -- \r\n--   m_axi_bresp                  -- \r\n----------------------------------" +
                    "--------------------------------------------\r\n\r\nentity ");
            
            #line 127 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.TopEntityName));
            
            #line default
            #line hidden
            this.Write(@" is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_S_AXI_DATA_WIDTH             : integer              := ");
            
            #line 136 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 137 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 138 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 139 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 140 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 141 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 142 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 143 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 144 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 145 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 146 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 147 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVDWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 148 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_DATA_WIDTH             : integer              := ");
            
            #line 149 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_MAX_BURST_LEN                : integer              := ");
            
            #line 150 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MaxBurstLen));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NATIVE_DATA_WIDTH            : integer              := ");
            
            #line 151 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NativeDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_LENGTH_WIDTH                 : integer              := ");
            
            #line 152 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LengthWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_ADDR_PIPE_DEPTH              : integer              := ");
            
            #line 153 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AddrPipeDepth));
            
            #line default
            #line hidden
            this.Write("\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  port\r\n  (\r\n  " +
                    "  -- ADD USER PORTS BELOW THIS LINE ------------------\r\n    --USER ports added h" +
                    "ere\r\n");
            
            #line 160 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"

    PushIndent("    ");
    foreach (var port in Master.UserPorts)
        WriteLine(port.Name + ": " + port.Type + ";");
    PopIndent();
 
            
            #line default
            #line hidden
            this.Write("    -- ADD USER PORTS ABOVE THIS LINE ------------------\r\n\r\n    -- DO NOT EDIT BE" +
                    "LOW THIS LINE ---------------------\r\n    -- Bus protocol ports, do not add to or" +
                    " delete\r\n    S_AXI_ACLK                     : in  std_logic;\r\n    S_AXI_ARESETN " +
                    "                 : in  std_logic;\r\n    S_AXI_AWADDR                   : in  std_" +
                    "logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n    S_AXI_AWVALID                 " +
                    " : in  std_logic;\r\n    S_AXI_WDATA                    : in  std_logic_vector(C_S" +
                    "_AXI_DATA_WIDTH-1 downto 0);\r\n    S_AXI_WSTRB                    : in  std_logic" +
                    "_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);\r\n    S_AXI_WVALID                   " +
                    ": in  std_logic;\r\n    S_AXI_BREADY                   : in  std_logic;\r\n    S_AXI" +
                    "_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);" +
                    "\r\n    S_AXI_ARVALID                  : in  std_logic;\r\n    S_AXI_RREADY         " +
                    "          : in  std_logic;\r\n    S_AXI_ARREADY                  : out std_logic;\r" +
                    "\n    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 " +
                    "downto 0);\r\n    S_AXI_RRESP                    : out std_logic_vector(1 downto 0" +
                    ");\r\n    S_AXI_RVALID                   : out std_logic;\r\n    S_AXI_WREADY       " +
                    "            : out std_logic;\r\n    S_AXI_BRESP                    : out std_logic" +
                    "_vector(1 downto 0);\r\n    S_AXI_BVALID                   : out std_logic;\r\n    S" +
                    "_AXI_AWREADY                  : out std_logic;\r\n    m_axi_aclk                  " +
                    "   : in  std_logic;\r\n    m_axi_aresetn                  : in  std_logic;\r\n    md" +
                    "_error                       : out std_logic;\r\n    m_axi_arready                " +
                    "  : in  std_logic;\r\n    m_axi_arvalid                  : out std_logic;\r\n    m_a" +
                    "xi_araddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0" +
                    ");\r\n    m_axi_arlen                    : out std_logic_vector(7 downto 0);\r\n    " +
                    "m_axi_arsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_ar" +
                    "burst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_arprot    " +
                    "               : out std_logic_vector(2 downto 0);\r\n    m_axi_arcache           " +
                    "       : out std_logic_vector(3 downto 0);\r\n    m_axi_rready                   :" +
                    " out std_logic;\r\n    m_axi_rvalid                   : in  std_logic;\r\n    m_axi_" +
                    "rdata                    : in  std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r" +
                    "\n    m_axi_rresp                    : in  std_logic_vector(1 downto 0);\r\n    m_a" +
                    "xi_rlast                    : in  std_logic;\r\n    m_axi_awready                 " +
                    " : in  std_logic;\r\n    m_axi_awvalid                  : out std_logic;\r\n    m_ax" +
                    "i_awaddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0)" +
                    ";\r\n    m_axi_awlen                    : out std_logic_vector(7 downto 0);\r\n    m" +
                    "_axi_awsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_awb" +
                    "urst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_awprot     " +
                    "              : out std_logic_vector(2 downto 0);\r\n    m_axi_awcache            " +
                    "      : out std_logic_vector(3 downto 0);\r\n    m_axi_wready                   : " +
                    "in  std_logic;\r\n    m_axi_wvalid                   : out std_logic;\r\n    m_axi_w" +
                    "data                    : out std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r\n" +
                    "    m_axi_wstrb                    : out std_logic_vector((C_M_AXI_DATA_WIDTH)/8" +
                    " - 1 downto 0);\r\n    m_axi_wlast                    : out std_logic;\r\n    m_axi_" +
                    "bready                   : out std_logic;\r\n    m_axi_bvalid                   : " +
                    "in  std_logic;\r\n    m_axi_bresp                    : in  std_logic_vector(1 down" +
                    "to 0)\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n\r\n  attri" +
                    "bute MAX_FANOUT : string;\r\n  attribute SIGIS : string;\r\n  attribute MAX_FANOUT o" +
                    "f S_AXI_ACLK       : signal is \"10000\";\r\n  attribute MAX_FANOUT of S_AXI_ARESETN" +
                    "       : signal is \"10000\";\r\n  attribute SIGIS of S_AXI_ACLK       : signal is \"" +
                    "Clk\";\r\n  attribute SIGIS of S_AXI_ARESETN       : signal is \"Rst\";\r\n\r\n  attribut" +
                    "e MAX_FANOUT of m_axi_aclk       : signal is \"10000\";\r\n  attribute MAX_FANOUT of" +
                    " m_axi_aresetn       : signal is \"10000\";\r\n  attribute SIGIS of m_axi_aclk      " +
                    " : signal is \"Clk\";\r\n  attribute SIGIS of m_axi_aresetn       : signal is \"Rst\";" +
                    "\r\nend entity ");
            
            #line 235 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.TopEntityName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n----------------------------------------------------------------------------" +
                    "--\r\n-- Architecture section\r\n---------------------------------------------------" +
                    "---------------------------\r\n\r\narchitecture IMP of ");
            
            #line 241 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.TopEntityName));
            
            #line default
            #line hidden
            this.Write(" is\r\n  component ");
            
            #line 242 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@" is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_S_AXI_DATA_WIDTH             : integer              := ");
            
            #line 251 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 252 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 253 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 254 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 255 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 256 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 257 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 258 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 259 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 260 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 261 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 262 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVDWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 263 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_DATA_WIDTH             : integer              := ");
            
            #line 264 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_MAX_BURST_LEN                : integer              := ");
            
            #line 265 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MaxBurstLen));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NATIVE_DATA_WIDTH            : integer              := ");
            
            #line 266 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NativeDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_LENGTH_WIDTH                 : integer              := ");
            
            #line 267 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LengthWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_ADDR_PIPE_DEPTH              : integer              := ");
            
            #line 268 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AddrPipeDepth));
            
            #line default
            #line hidden
            this.Write("\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  port\r\n  (\r\n  " +
                    "  -- ADD USER PORTS BELOW THIS LINE ------------------\r\n    --USER ports added h" +
                    "ere\r\n");
            
            #line 275 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"

    PushIndent("    ");
    foreach (var port in Master.UserPorts)
        WriteLine(port.Name + ": " + port.Type + ";");
    PopIndent();
 
            
            #line default
            #line hidden
            this.Write("    -- ADD USER PORTS ABOVE THIS LINE ------------------\r\n\r\n    -- DO NOT EDIT BE" +
                    "LOW THIS LINE ---------------------\r\n    -- Bus protocol ports, do not add to or" +
                    " delete\r\n    S_AXI_ACLK                     : in  std_logic;\r\n    S_AXI_ARESETN " +
                    "                 : in  std_logic;\r\n    S_AXI_AWADDR                   : in  std_" +
                    "logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n    S_AXI_AWVALID                 " +
                    " : in  std_logic;\r\n    S_AXI_WDATA                    : in  std_logic_vector(C_S" +
                    "_AXI_DATA_WIDTH-1 downto 0);\r\n    S_AXI_WSTRB                    : in  std_logic" +
                    "_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);\r\n    S_AXI_WVALID                   " +
                    ": in  std_logic;\r\n    S_AXI_BREADY                   : in  std_logic;\r\n    S_AXI" +
                    "_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);" +
                    "\r\n    S_AXI_ARVALID                  : in  std_logic;\r\n    S_AXI_RREADY         " +
                    "          : in  std_logic;\r\n    S_AXI_ARREADY                  : out std_logic;\r" +
                    "\n    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 " +
                    "downto 0);\r\n    S_AXI_RRESP                    : out std_logic_vector(1 downto 0" +
                    ");\r\n    S_AXI_RVALID                   : out std_logic;\r\n    S_AXI_WREADY       " +
                    "            : out std_logic;\r\n    S_AXI_BRESP                    : out std_logic" +
                    "_vector(1 downto 0);\r\n    S_AXI_BVALID                   : out std_logic;\r\n    S" +
                    "_AXI_AWREADY                  : out std_logic;\r\n    m_axi_aclk                  " +
                    "   : in  std_logic;\r\n    m_axi_aresetn                  : in  std_logic;\r\n    md" +
                    "_error                       : out std_logic;\r\n    m_axi_arready                " +
                    "  : in  std_logic;\r\n    m_axi_arvalid                  : out std_logic;\r\n    m_a" +
                    "xi_araddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0" +
                    ");\r\n    m_axi_arlen                    : out std_logic_vector(7 downto 0);\r\n    " +
                    "m_axi_arsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_ar" +
                    "burst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_arprot    " +
                    "               : out std_logic_vector(2 downto 0);\r\n    m_axi_arcache           " +
                    "       : out std_logic_vector(3 downto 0);\r\n    m_axi_rready                   :" +
                    " out std_logic;\r\n    m_axi_rvalid                   : in  std_logic;\r\n    m_axi_" +
                    "rdata                    : in  std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r" +
                    "\n    m_axi_rresp                    : in  std_logic_vector(1 downto 0);\r\n    m_a" +
                    "xi_rlast                    : in  std_logic;\r\n    m_axi_awready                 " +
                    " : in  std_logic;\r\n    m_axi_awvalid                  : out std_logic;\r\n    m_ax" +
                    "i_awaddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0)" +
                    ";\r\n    m_axi_awlen                    : out std_logic_vector(7 downto 0);\r\n    m" +
                    "_axi_awsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_awb" +
                    "urst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_awprot     " +
                    "              : out std_logic_vector(2 downto 0);\r\n    m_axi_awcache            " +
                    "      : out std_logic_vector(3 downto 0);\r\n    m_axi_wready                   : " +
                    "in  std_logic;\r\n    m_axi_wvalid                   : out std_logic;\r\n    m_axi_w" +
                    "data                    : out std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r\n" +
                    "    m_axi_wstrb                    : out std_logic_vector((C_M_AXI_DATA_WIDTH)/8" +
                    " - 1 downto 0);\r\n    m_axi_wlast                    : out std_logic;\r\n    m_axi_" +
                    "bready                   : out std_logic;\r\n    m_axi_bvalid                   : " +
                    "in  std_logic;\r\n    m_axi_bresp                    : in  std_logic_vector(1 down" +
                    "to 0)\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  end com" +
                    "ponent;\r\nbegin\r\n\r\n  ------------------------------------------\r\n  -- instantiate" +
                    " implementation\r\n  ------------------------------------------\r\n  MASTER_IMP_I : " +
                    "");
            
            #line 344 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@"
    generic map
    (
        C_S_AXI_DATA_WIDTH             => C_S_AXI_DATA_WIDTH,
        C_S_AXI_ADDR_WIDTH             => C_S_AXI_ADDR_WIDTH,
        C_S_AXI_MIN_SIZE               => C_S_AXI_MIN_SIZE,
        C_USE_WSTRB                    => C_USE_WSTRB,
        C_DPHASE_TIMEOUT               => C_DPHASE_TIMEOUT,
        C_BASEADDR                     => C_BASEADDR,
        C_HIGHADDR                     => C_HIGHADDR,
        C_FAMILY                       => C_FAMILY,
        C_NUM_REG                      => C_NUM_REG,
        C_NUM_MEM                      => C_NUM_MEM,
        C_SLV_AWIDTH                   => C_SLV_AWIDTH,
        C_SLV_DWIDTH                   => C_SLV_DWIDTH,
        C_M_AXI_ADDR_WIDTH             => C_M_AXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH             => C_M_AXI_DATA_WIDTH,
        C_MAX_BURST_LEN                => C_MAX_BURST_LEN,
        C_NATIVE_DATA_WIDTH            => C_NATIVE_DATA_WIDTH,
        C_LENGTH_WIDTH                 => C_LENGTH_WIDTH,
        C_ADDR_PIPE_DEPTH              => C_ADDR_PIPE_DEPTH
    )
    port map
    (
");
            
            #line 368 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterTop.tt"

    PushIndent("      ");
    foreach (var port in Master.UserPorts)
        WriteLine(port.Name + " => " + port.Name + ",");
    PopIndent();
 
            
            #line default
            #line hidden
            this.Write("\r\n      S_AXI_ACLK                     => S_AXI_ACLK,\r\n      S_AXI_ARESETN       " +
                    "           => S_AXI_ARESETN,\r\n      S_AXI_AWADDR                   => S_AXI_AWAD" +
                    "DR,\r\n      S_AXI_AWVALID                  => S_AXI_AWVALID,\r\n      S_AXI_WDATA  " +
                    "                  => S_AXI_WDATA,\r\n      S_AXI_WSTRB                    => S_AXI" +
                    "_WSTRB,\r\n      S_AXI_WVALID                   => S_AXI_WVALID,\r\n      S_AXI_BREA" +
                    "DY                   => S_AXI_BREADY,\r\n      S_AXI_ARADDR                   => S" +
                    "_AXI_ARADDR,\r\n      S_AXI_ARVALID                  => S_AXI_ARVALID,\r\n      S_AX" +
                    "I_RREADY                   => S_AXI_RREADY,\r\n      S_AXI_ARREADY                " +
                    "  => S_AXI_ARREADY,\r\n      S_AXI_RDATA                    => S_AXI_RDATA,\r\n     " +
                    " S_AXI_RRESP                    => S_AXI_RRESP,\r\n      S_AXI_RVALID             " +
                    "      => S_AXI_RVALID,\r\n      S_AXI_WREADY                   => S_AXI_WREADY,\r\n " +
                    "     S_AXI_BRESP                    => S_AXI_BRESP,\r\n      S_AXI_BVALID         " +
                    "          => S_AXI_BVALID,\r\n      S_AXI_AWREADY                  => S_AXI_AWREAD" +
                    "Y,\r\n      m_axi_aclk                     => m_axi_aclk,\r\n      m_axi_aresetn    " +
                    "              => m_axi_aresetn,\r\n      md_error                       => md_erro" +
                    "r,\r\n      m_axi_arready                  => m_axi_arready,\r\n      m_axi_arvalid " +
                    "                 => m_axi_arvalid,\r\n      m_axi_araddr                   => m_ax" +
                    "i_araddr,\r\n      m_axi_arlen                    => m_axi_arlen,\r\n      m_axi_ars" +
                    "ize                   => m_axi_arsize,\r\n      m_axi_arburst                  => " +
                    "m_axi_arburst,\r\n      m_axi_arprot                   => m_axi_arprot,\r\n      m_a" +
                    "xi_arcache                  => m_axi_arcache,\r\n      m_axi_rready               " +
                    "    => m_axi_rready,\r\n      m_axi_rvalid                   => m_axi_rvalid,\r\n   " +
                    "   m_axi_rdata                    => m_axi_rdata,\r\n      m_axi_rresp            " +
                    "        => m_axi_rresp,\r\n      m_axi_rlast                    => m_axi_rlast,\r\n " +
                    "     m_axi_awready                  => m_axi_awready,\r\n      m_axi_awvalid      " +
                    "            => m_axi_awvalid,\r\n      m_axi_awaddr                   => m_axi_awa" +
                    "ddr,\r\n      m_axi_awlen                    => m_axi_awlen,\r\n      m_axi_awsize  " +
                    "                 => m_axi_awsize,\r\n      m_axi_awburst                  => m_axi" +
                    "_awburst,\r\n      m_axi_awprot                   => m_axi_awprot,\r\n      m_axi_aw" +
                    "cache                  => m_axi_awcache,\r\n      m_axi_wready                   =" +
                    "> m_axi_wready,\r\n      m_axi_wvalid                   => m_axi_wvalid,\r\n      m_" +
                    "axi_wdata                    => m_axi_wdata,\r\n      m_axi_wstrb                 " +
                    "   => m_axi_wstrb,\r\n      m_axi_wlast                    => m_axi_wlast,\r\n      " +
                    "m_axi_bready                   => m_axi_bready,\r\n      m_axi_bvalid             " +
                    "      => m_axi_bvalid,\r\n      m_axi_bresp                    => m_axi_bresp\r\n   " +
                    " );\r\n\r\nend IMP;\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AXIMasterTopBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
