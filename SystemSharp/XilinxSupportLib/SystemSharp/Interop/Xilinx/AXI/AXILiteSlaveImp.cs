// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XilinxSupportLib.SystemSharp.Interop.Xilinx.AXI
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AXILiteSlaveImp : AXILiteSlaveImpBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n------------------------------------------------------------------------------\r" +
                    "\n-- ");
            
            #line 7 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@".vhd - entity/architecture pair
------------------------------------------------------------------------------
-- IMPORTANT:
-- DO NOT MODIFY THIS FILE EXCEPT IN THE DESIGNATED SECTIONS.
--
-- SEARCH FOR --USER TO DETERMINE WHERE CHANGES ARE ALLOWED.
--
-- TYPICALLY, THE ONLY ACCEPTABLE CHANGES INVOLVE ADDING NEW
-- PORTS AND GENERICS THAT GET PASSED THROUGH TO THE INSTANTIATION
-- OF THE USER_LOGIC ENTITY.
------------------------------------------------------------------------------
-- Filename:          ");
            
            #line 18 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpFileName));
            
            #line default
            #line hidden
            this.Write(".vhd\r\n-- Version:           ");
            
            #line 19 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.Version));
            
            #line default
            #line hidden
            this.Write("\r\n-- Description:       Top level design, instantiates library components and use" +
                    "r logic.\r\n-- Date:              ");
            
            #line 21 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.CreationDate));
            
            #line default
            #line hidden
            this.Write(@" (by System#)
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Naming Conventions:
--   active low signals:                    ""*_n""
--   clock signals:                         ""clk"", ""clk_div#"", ""clk_#x""
--   reset signals:                         ""rst"", ""rst_n""
--   generics:                              ""C_*""
--   user defined types:                    ""*_TYPE""
--   state machine next state:              ""*_ns""
--   state machine current state:           ""*_cs""
--   combinatorial signals:                 ""*_com""
--   pipelined or register delay signals:   ""*_d#""
--   counter signals:                       ""*cnt*""
--   clock enable signals:                  ""*_ce""
--   internal version of output port:       ""*_i""
--   device pins:                           ""*_pin""
--   ports:                                 ""- Names begin with Uppercase""
--   processes:                             ""*_PROCESS""
--   component instantiations:              ""<ENTITY_>I_<FUNC>""
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;
use proc_common_v3_00_a.ipif_pkg.all;

library axi_lite_ipif_v1_01_a;
use axi_lite_ipif_v1_01_a.axi_lite_ipif;

library ");
            
            #line 55 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.LibraryName));
            
            #line default
            #line hidden
            this.Write(";\r\nuse ");
            
            #line 56 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.LibraryName));
            
            #line default
            #line hidden
            this.Write(".user_logic;\r\n\r\n-----------------------------------------------------------------" +
                    "-------------\r\n-- Entity section\r\n----------------------------------------------" +
                    "--------------------------------\r\n-- Definition of Generics:\r\n--   C_S_AXI_DATA_" +
                    "WIDTH           -- \r\n--   C_S_AXI_ADDR_WIDTH           -- \r\n--   C_S_AXI_MIN_SIZ" +
                    "E             -- \r\n--   C_USE_WSTRB                  -- \r\n--   C_DPHASE_TIMEOUT " +
                    "            -- \r\n--   C_BASEADDR                   -- AXI4LITE slave: base addre" +
                    "ss\r\n--   C_HIGHADDR                   -- AXI4LITE slave: high address\r\n--   C_FA" +
                    "MILY                     -- \r\n--   C_NUM_REG                    -- Number of sof" +
                    "tware accessible registers\r\n--   C_NUM_MEM                    -- Number of addre" +
                    "ss-ranges\r\n--   C_SLV_AWIDTH                 -- Slave interface address bus widt" +
                    "h\r\n--   C_SLV_DWIDTH                 -- Slave interface data bus width\r\n--\r\n-- D" +
                    "efinition of Ports:\r\n--   S_AXI_ACLK                   -- \r\n--   S_AXI_ARESETN  " +
                    "              -- \r\n--   S_AXI_AWADDR                 -- \r\n--   S_AXI_AWVALID    " +
                    "            -- \r\n--   S_AXI_WDATA                  -- \r\n--   S_AXI_WSTRB        " +
                    "          -- \r\n--   S_AXI_WVALID                 -- \r\n--   S_AXI_BREADY         " +
                    "        -- \r\n--   S_AXI_ARADDR                 -- \r\n--   S_AXI_ARVALID          " +
                    "      -- \r\n--   S_AXI_RREADY                 -- \r\n--   S_AXI_ARREADY            " +
                    "    -- \r\n--   S_AXI_RDATA                  -- \r\n--   S_AXI_RRESP                " +
                    "  -- \r\n--   S_AXI_RVALID                 -- \r\n--   S_AXI_WREADY                 " +
                    "-- \r\n--   S_AXI_BRESP                  -- \r\n--   S_AXI_BVALID                 --" +
                    " \r\n--   S_AXI_AWREADY                -- \r\n--------------------------------------" +
                    "----------------------------------------\r\n\r\nentity ");
            
            #line 97 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@" is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_S_AXI_DATA_WIDTH             : integer              := ");
            
            #line 106 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 107 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 108 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 109 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 110 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 111 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 112 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 113 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 114 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 115 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 116 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 117 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVDWidth));
            
            #line default
            #line hidden
            this.Write("\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  port\r\n  (\r\n  " +
                    "  -- ADD USER PORTS BELOW THIS LINE ------------------\r\n    --USER ports added h" +
                    "ere\r\n    -- ADD USER PORTS ABOVE THIS LINE ------------------\r\n\r\n    -- DO NOT E" +
                    "DIT BELOW THIS LINE ---------------------\r\n    -- Bus protocol ports, do not add" +
                    " to or delete\r\n    S_AXI_ACLK                     : in  std_logic;\r\n    S_AXI_AR" +
                    "ESETN                  : in  std_logic;\r\n    S_AXI_AWADDR                   : in" +
                    "  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n    S_AXI_AWVALID           " +
                    "       : in  std_logic;\r\n    S_AXI_WDATA                    : in  std_logic_vect" +
                    "or(C_S_AXI_DATA_WIDTH-1 downto 0);\r\n    S_AXI_WSTRB                    : in  std" +
                    "_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);\r\n    S_AXI_WVALID             " +
                    "      : in  std_logic;\r\n    S_AXI_BREADY                   : in  std_logic;\r\n   " +
                    " S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 down" +
                    "to 0);\r\n    S_AXI_ARVALID                  : in  std_logic;\r\n    S_AXI_RREADY   " +
                    "                : in  std_logic;\r\n    S_AXI_ARREADY                  : out std_l" +
                    "ogic;\r\n    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WI" +
                    "DTH-1 downto 0);\r\n    S_AXI_RRESP                    : out std_logic_vector(1 do" +
                    "wnto 0);\r\n    S_AXI_RVALID                   : out std_logic;\r\n    S_AXI_WREADY " +
                    "                  : out std_logic;\r\n    S_AXI_BRESP                    : out std" +
                    "_logic_vector(1 downto 0);\r\n    S_AXI_BVALID                   : out std_logic;\r" +
                    "\n    S_AXI_AWREADY                  : out std_logic\r\n    -- DO NOT EDIT ABOVE TH" +
                    "IS LINE ---------------------\r\n  );\r\n\r\n  attribute MAX_FANOUT : string;\r\n  attri" +
                    "bute SIGIS : string;\r\n  attribute MAX_FANOUT of S_AXI_ACLK       : signal is \"10" +
                    "000\";\r\n  attribute MAX_FANOUT of S_AXI_ARESETN       : signal is \"10000\";\r\n  att" +
                    "ribute SIGIS of S_AXI_ACLK       : signal is \"Clk\";\r\n  attribute SIGIS of S_AXI_" +
                    "ARESETN       : signal is \"Rst\";\r\nend entity ");
            
            #line 156 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n----------------------------------------------------------------------------" +
                    "--\r\n-- Architecture section\r\n---------------------------------------------------" +
                    "---------------------------\r\n\r\narchitecture IMP of ");
            
            #line 162 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@" is

  constant USER_SLV_DWIDTH                : integer              := C_S_AXI_DATA_WIDTH;

  constant IPIF_SLV_DWIDTH                : integer              := C_S_AXI_DATA_WIDTH;

  constant ZERO_ADDR_PAD                  : std_logic_vector(0 to 31) := (others => '0');
  constant USER_SLV_BASEADDR              : std_logic_vector     := C_BASEADDR;
  constant USER_SLV_HIGHADDR              : std_logic_vector     := C_HIGHADDR;

  constant IPIF_ARD_ADDR_RANGE_ARRAY      : SLV64_ARRAY_TYPE     := 
    (
      ZERO_ADDR_PAD & USER_SLV_BASEADDR,  -- user logic slave space base address
      ZERO_ADDR_PAD & USER_SLV_HIGHADDR   -- user logic slave space high address
    );

  constant USER_SLV_NUM_REG               : integer              := ");
            
            #line 178 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.UserSLVNumReg));
            
            #line default
            #line hidden
            this.Write(";\r\n  constant USER_NUM_REG                   : integer              := USER_SLV_N" +
                    "UM_REG;\r\n  constant TOTAL_IPIF_CE                  : integer              := USE" +
                    "R_NUM_REG;\r\n\r\n  constant IPIF_ARD_NUM_CE_ARRAY          : INTEGER_ARRAY_TYPE   :" +
                    "= \r\n    (\r\n      0  => (USER_SLV_NUM_REG)            -- number of ce for user lo" +
                    "gic slave space\r\n    );\r\n\r\n  ------------------------------------------\r\n  -- In" +
                    "dex for CS/CE\r\n  ------------------------------------------\r\n  constant USER_SLV" +
                    "_CS_INDEX              : integer              := 0;\r\n  constant USER_SLV_CE_INDE" +
                    "X              : integer              := calc_start_ce_index(IPIF_ARD_NUM_CE_ARR" +
                    "AY, USER_SLV_CS_INDEX);\r\n\r\n  constant USER_CE_INDEX                  : integer  " +
                    "            := USER_SLV_CE_INDEX;\r\n\r\n  -----------------------------------------" +
                    "-\r\n  -- IP Interconnect (IPIC) signal declarations\r\n  --------------------------" +
                    "----------------\r\n  signal ipif_Bus2IP_Clk                : std_logic;\r\n  signal" +
                    " ipif_Bus2IP_Resetn             : std_logic;\r\n  signal ipif_Bus2IP_Addr         " +
                    "      : std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n  signal ipif_Bus2IP_R" +
                    "NW                : std_logic;\r\n  signal ipif_Bus2IP_BE                 : std_lo" +
                    "gic_vector(IPIF_SLV_DWIDTH/8-1 downto 0);\r\n  signal ipif_Bus2IP_CS              " +
                    "   : std_logic_vector((IPIF_ARD_ADDR_RANGE_ARRAY\'LENGTH)/2-1 downto 0);\r\n  signa" +
                    "l ipif_Bus2IP_RdCE               : std_logic_vector(calc_num_ce(IPIF_ARD_NUM_CE_" +
                    "ARRAY)-1 downto 0);\r\n  signal ipif_Bus2IP_WrCE               : std_logic_vector(" +
                    "calc_num_ce(IPIF_ARD_NUM_CE_ARRAY)-1 downto 0);\r\n  signal ipif_Bus2IP_Data      " +
                    "         : std_logic_vector(IPIF_SLV_DWIDTH-1 downto 0);\r\n  signal ipif_IP2Bus_W" +
                    "rAck              : std_logic;\r\n  signal ipif_IP2Bus_RdAck              : std_lo" +
                    "gic;\r\n  signal ipif_IP2Bus_Error              : std_logic;\r\n  signal ipif_IP2Bus" +
                    "_Data               : std_logic_vector(IPIF_SLV_DWIDTH-1 downto 0);\r\n  signal us" +
                    "er_Bus2IP_RdCE               : std_logic_vector(USER_NUM_REG-1 downto 0);\r\n  sig" +
                    "nal user_Bus2IP_WrCE               : std_logic_vector(USER_NUM_REG-1 downto 0);\r" +
                    "\n  signal user_IP2Bus_Data               : std_logic_vector(USER_SLV_DWIDTH-1 do" +
                    "wnto 0);\r\n  signal user_IP2Bus_RdAck              : std_logic;\r\n  signal user_IP" +
                    "2Bus_WrAck              : std_logic;\r\n  signal user_IP2Bus_Error              : " +
                    "std_logic;\r\n\r\nbegin\r\n\r\n  ------------------------------------------\r\n  -- instan" +
                    "tiate axi_lite_ipif\r\n  ------------------------------------------\r\n  AXI_LITE_IP" +
                    "IF_I : entity axi_lite_ipif_v1_01_a.axi_lite_ipif\r\n    generic map\r\n    (\r\n     " +
                    " C_S_AXI_DATA_WIDTH             => IPIF_SLV_DWIDTH,\r\n      C_S_AXI_ADDR_WIDTH   " +
                    "          => C_S_AXI_ADDR_WIDTH,\r\n      C_S_AXI_MIN_SIZE               => C_S_AX" +
                    "I_MIN_SIZE,\r\n      C_USE_WSTRB                    => C_USE_WSTRB,\r\n      C_DPHAS" +
                    "E_TIMEOUT               => C_DPHASE_TIMEOUT,\r\n      C_ARD_ADDR_RANGE_ARRAY      " +
                    "   => IPIF_ARD_ADDR_RANGE_ARRAY,\r\n      C_ARD_NUM_CE_ARRAY             => IPIF_A" +
                    "RD_NUM_CE_ARRAY,\r\n      C_FAMILY                       => C_FAMILY\r\n    )\r\n    p" +
                    "ort map\r\n    (\r\n      S_AXI_ACLK                     => S_AXI_ACLK,\r\n      S_AXI" +
                    "_ARESETN                  => S_AXI_ARESETN,\r\n      S_AXI_AWADDR                 " +
                    "  => S_AXI_AWADDR,\r\n      S_AXI_AWVALID                  => S_AXI_AWVALID,\r\n    " +
                    "  S_AXI_WDATA                    => S_AXI_WDATA,\r\n      S_AXI_WSTRB             " +
                    "       => S_AXI_WSTRB,\r\n      S_AXI_WVALID                   => S_AXI_WVALID,\r\n " +
                    "     S_AXI_BREADY                   => S_AXI_BREADY,\r\n      S_AXI_ARADDR        " +
                    "           => S_AXI_ARADDR,\r\n      S_AXI_ARVALID                  => S_AXI_ARVAL" +
                    "ID,\r\n      S_AXI_RREADY                   => S_AXI_RREADY,\r\n      S_AXI_ARREADY " +
                    "                 => S_AXI_ARREADY,\r\n      S_AXI_RDATA                    => S_AX" +
                    "I_RDATA,\r\n      S_AXI_RRESP                    => S_AXI_RRESP,\r\n      S_AXI_RVAL" +
                    "ID                   => S_AXI_RVALID,\r\n      S_AXI_WREADY                   => S" +
                    "_AXI_WREADY,\r\n      S_AXI_BRESP                    => S_AXI_BRESP,\r\n      S_AXI_" +
                    "BVALID                   => S_AXI_BVALID,\r\n      S_AXI_AWREADY                  " +
                    "=> S_AXI_AWREADY,\r\n      Bus2IP_Clk                     => ipif_Bus2IP_Clk,\r\n   " +
                    "   Bus2IP_Resetn                  => ipif_Bus2IP_Resetn,\r\n      Bus2IP_Addr     " +
                    "               => ipif_Bus2IP_Addr,\r\n      Bus2IP_RNW                     => ipi" +
                    "f_Bus2IP_RNW,\r\n      Bus2IP_BE                      => ipif_Bus2IP_BE,\r\n      Bu" +
                    "s2IP_CS                      => ipif_Bus2IP_CS,\r\n      Bus2IP_RdCE              " +
                    "      => ipif_Bus2IP_RdCE,\r\n      Bus2IP_WrCE                    => ipif_Bus2IP_" +
                    "WrCE,\r\n      Bus2IP_Data                    => ipif_Bus2IP_Data,\r\n      IP2Bus_W" +
                    "rAck                   => ipif_IP2Bus_WrAck,\r\n      IP2Bus_RdAck                " +
                    "   => ipif_IP2Bus_RdAck,\r\n      IP2Bus_Error                   => ipif_IP2Bus_Er" +
                    "ror,\r\n      IP2Bus_Data                    => ipif_IP2Bus_Data\r\n    );\r\n\r\n  ----" +
                    "--------------------------------------\r\n  -- instantiate User Logic\r\n  ---------" +
                    "---------------------------------\r\n  USER_LOGIC_I : entity ");
            
            #line 274 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.LibraryName));
            
            #line default
            #line hidden
            this.Write(@".user_logic
    port map
    (
      -- MAP USER PORTS BELOW THIS LINE ------------------
      --USER ports mapped here
      -- MAP USER PORTS ABOVE THIS LINE ------------------

      Bus2IP_Clk                     => ipif_Bus2IP_Clk,
      Bus2IP_Resetn                  => ipif_Bus2IP_Resetn,
      Bus2IP_Data                    => ipif_Bus2IP_Data,
      Bus2IP_BE                      => ipif_Bus2IP_BE,
      Bus2IP_RdCE                    => user_Bus2IP_RdCE,
      Bus2IP_WrCE                    => user_Bus2IP_WrCE,
      IP2Bus_Data                    => user_IP2Bus_Data,
      IP2Bus_RdAck                   => user_IP2Bus_RdAck,
      IP2Bus_WrAck                   => user_IP2Bus_WrAck,
      IP2Bus_Error                   => user_IP2Bus_Error
    );

  ------------------------------------------
  -- connect internal signals
  ------------------------------------------
  ipif_IP2Bus_Data <= user_IP2Bus_Data;
  ipif_IP2Bus_WrAck <= user_IP2Bus_WrAck;
  ipif_IP2Bus_RdAck <= user_IP2Bus_RdAck;
  ipif_IP2Bus_Error <= user_IP2Bus_Error;

  user_Bus2IP_RdCE <= ipif_Bus2IP_RdCE(USER_NUM_REG-1 downto 0);
  user_Bus2IP_WrCE <= ipif_Bus2IP_WrCE(USER_NUM_REG-1 downto 0);

end IMP;
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AXILiteSlaveImpBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
