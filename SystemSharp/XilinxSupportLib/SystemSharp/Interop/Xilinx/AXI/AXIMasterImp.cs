// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XilinxSupportLib.SystemSharp.Interop.Xilinx.AXI
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AXIMasterImp : AXIMasterImpBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n------------------------------------------------------------------------------\r" +
                    "\n-- ");
            
            #line 7 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@".vhd - entity/architecture pair
------------------------------------------------------------------------------
-- IMPORTANT:
-- DO NOT MODIFY THIS FILE EXCEPT IN THE DESIGNATED SECTIONS.
--
-- SEARCH FOR --USER TO DETERMINE WHERE CHANGES ARE ALLOWED.
--
-- TYPICALLY, THE ONLY ACCEPTABLE CHANGES INVOLVE ADDING NEW
-- PORTS AND GENERICS THAT GET PASSED THROUGH TO THE INSTANTIATION
-- OF THE USER_LOGIC ENTITY.
------------------------------------------------------------------------------
--
------------------------------------------------------------------------------
-- Filename:          ");
            
            #line 20 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(".vhd\r\n-- Version:           ");
            
            #line 21 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.Version));
            
            #line default
            #line hidden
            this.Write("\r\n-- Description:       Top level design, instantiates library components and use" +
                    "r logic.\r\n-- Date:              ");
            
            #line 23 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.CreationDate));
            
            #line default
            #line hidden
            this.Write("\r\n-- VHDL Standard:     VHDL\'93\r\n------------------------------------------------" +
                    "------------------------------\r\n-- Naming Conventions:\r\n--   active low signals:" +
                    "                    \"*_n\"\r\n--   clock signals:                         \"clk\", \"c" +
                    "lk_div#\", \"clk_#x\"\r\n--   reset signals:                         \"rst\", \"rst_n\"\r\n" +
                    "--   generics:                              \"C_*\"\r\n--   user defined types:     " +
                    "               \"*_TYPE\"\r\n--   state machine next state:              \"*_ns\"\r\n-- " +
                    "  state machine current state:           \"*_cs\"\r\n--   combinatorial signals:    " +
                    "             \"*_com\"\r\n--   pipelined or register delay signals:   \"*_d#\"\r\n--   c" +
                    "ounter signals:                       \"*cnt*\"\r\n--   clock enable signals:       " +
                    "           \"*_ce\"\r\n--   internal version of output port:       \"*_i\"\r\n--   devic" +
                    "e pins:                           \"*_pin\"\r\n--   ports:                          " +
                    "       \"- Names begin with Uppercase\"\r\n--   processes:                          " +
                    "   \"*_PROCESS\"\r\n--   component instantiations:              \"<ENTITY_>I_<FUNC>\"\r" +
                    "\n------------------------------------------------------------------------------\r" +
                    "\n\r\nlibrary ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.std_logic_arith.all;\r\nu" +
                    "se ieee.std_logic_unsigned.all;\r\n\r\nlibrary proc_common_v3_00_a;\r\nuse proc_common" +
                    "_v3_00_a.proc_common_pkg.all;\r\nuse proc_common_v3_00_a.ipif_pkg.all;\r\n\r\nlibrary " +
                    "axi_lite_ipif_v1_01_a;\r\nuse axi_lite_ipif_v1_01_a.axi_lite_ipif;\r\n\r\nlibrary axi_" +
                    "master_burst_v1_00_a;\r\nuse axi_master_burst_v1_00_a.axi_master_burst;\r\n\r\nlibrary" +
                    " ");
            
            #line 60 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LibraryName));
            
            #line default
            #line hidden
            this.Write(";\r\nuse ");
            
            #line 61 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LibraryName));
            
            #line default
            #line hidden
            this.Write(".user_logic;\r\n\r\n-----------------------------------------------------------------" +
                    "-------------\r\n-- Entity section\r\n----------------------------------------------" +
                    "--------------------------------\r\n-- Definition of Generics:\r\n--   C_S_AXI_DATA_" +
                    "WIDTH           -- \r\n--   C_S_AXI_ADDR_WIDTH           -- \r\n--   C_S_AXI_MIN_SIZ" +
                    "E             -- \r\n--   C_USE_WSTRB                  -- \r\n--   C_DPHASE_TIMEOUT " +
                    "            -- \r\n--   C_BASEADDR                   -- AXI4LITE slave: base addre" +
                    "ss\r\n--   C_HIGHADDR                   -- AXI4LITE slave: high address\r\n--   C_FA" +
                    "MILY                     -- \r\n--   C_NUM_REG                    -- Number of sof" +
                    "tware accessible registers\r\n--   C_NUM_MEM                    -- Number of addre" +
                    "ss-ranges\r\n--   C_SLV_AWIDTH                 -- Slave interface address bus widt" +
                    "h\r\n--   C_SLV_DWIDTH                 -- Slave interface data bus width\r\n--   C_M" +
                    "_AXI_ADDR_WIDTH           -- Master-Intf address bus width\r\n--   C_M_AXI_DATA_WI" +
                    "DTH           -- Master-Intf data bus width\r\n--   C_MAX_BURST_LEN              -" +
                    "- Max no. of data-beats allowed in burst\r\n--   C_NATIVE_DATA_WIDTH          -- I" +
                    "nternal bus width on user-side\r\n--   C_LENGTH_WIDTH               -- Master inte" +
                    "rface data bus width\r\n--   C_ADDR_PIPE_DEPTH            -- Depth of Address pipe" +
                    "lining\r\n--\r\n-- Definition of Ports:\r\n--   S_AXI_ACLK                   -- \r\n--  " +
                    " S_AXI_ARESETN                -- \r\n--   S_AXI_AWADDR                 -- \r\n--   S" +
                    "_AXI_AWVALID                -- \r\n--   S_AXI_WDATA                  -- \r\n--   S_A" +
                    "XI_WSTRB                  -- \r\n--   S_AXI_WVALID                 -- \r\n--   S_AXI" +
                    "_BREADY                 -- \r\n--   S_AXI_ARADDR                 -- \r\n--   S_AXI_A" +
                    "RVALID                -- \r\n--   S_AXI_RREADY                 -- \r\n--   S_AXI_ARR" +
                    "EADY                -- \r\n--   S_AXI_RDATA                  -- \r\n--   S_AXI_RRESP" +
                    "                  -- \r\n--   S_AXI_RVALID                 -- \r\n--   S_AXI_WREADY " +
                    "                -- \r\n--   S_AXI_BRESP                  -- \r\n--   S_AXI_BVALID   " +
                    "              -- \r\n--   S_AXI_AWREADY                -- \r\n--   m_axi_aclk       " +
                    "            -- \r\n--   m_axi_aresetn                -- \r\n--   md_error           " +
                    "          -- \r\n--   m_axi_arready                -- \r\n--   m_axi_arvalid        " +
                    "        -- \r\n--   m_axi_araddr                 -- \r\n--   m_axi_arlen            " +
                    "      -- \r\n--   m_axi_arsize                 -- \r\n--   m_axi_arburst            " +
                    "    -- \r\n--   m_axi_arprot                 -- \r\n--   m_axi_arcache              " +
                    "  -- \r\n--   m_axi_rready                 -- \r\n--   m_axi_rvalid                 " +
                    "-- \r\n--   m_axi_rdata                  -- \r\n--   m_axi_rresp                  --" +
                    " \r\n--   m_axi_rlast                  -- \r\n--   m_axi_awready                -- \r" +
                    "\n--   m_axi_awvalid                -- \r\n--   m_axi_awaddr                 -- \r\n-" +
                    "-   m_axi_awlen                  -- \r\n--   m_axi_awsize                 -- \r\n-- " +
                    "  m_axi_awburst                -- \r\n--   m_axi_awprot                 -- \r\n--   " +
                    "m_axi_awcache                -- \r\n--   m_axi_wready                 -- \r\n--   m_" +
                    "axi_wvalid                 -- \r\n--   m_axi_wdata                  -- \r\n--   m_ax" +
                    "i_wstrb                  -- \r\n--   m_axi_wlast                  -- \r\n--   m_axi_" +
                    "bready                 -- \r\n--   m_axi_bvalid                 -- \r\n--   m_axi_br" +
                    "esp                  -- \r\n------------------------------------------------------" +
                    "------------------------\r\n\r\nentity ");
            
            #line 140 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(@" is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_S_AXI_DATA_WIDTH             : integer              := ");
            
            #line 149 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 150 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SlaveAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 151 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 152 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 153 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 154 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 155 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 156 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 157 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 158 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 159 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 160 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.SLVDWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 161 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_M_AXI_DATA_WIDTH             : integer              := ");
            
            #line 162 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MasterAXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_MAX_BURST_LEN                : integer              := ");
            
            #line 163 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.MaxBurstLen));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NATIVE_DATA_WIDTH            : integer              := ");
            
            #line 164 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.NativeDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_LENGTH_WIDTH                 : integer              := ");
            
            #line 165 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LengthWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_ADDR_PIPE_DEPTH              : integer              := ");
            
            #line 166 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.AddrPipeDepth));
            
            #line default
            #line hidden
            this.Write("\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  port\r\n  (\r\n  " +
                    "  -- ADD USER PORTS BELOW THIS LINE ------------------\r\n    --USER ports added h" +
                    "ere\r\n");
            
            #line 173 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"

    PushIndent("    ");
    foreach (var port in Master.UserPorts)
        WriteLine(port.Name + ": " + port.Type + ";");
    PopIndent();
 
            
            #line default
            #line hidden
            this.Write("    -- ADD USER PORTS ABOVE THIS LINE ------------------\r\n\r\n    -- DO NOT EDIT BE" +
                    "LOW THIS LINE ---------------------\r\n    -- Bus protocol ports, do not add to or" +
                    " delete\r\n    S_AXI_ACLK                     : in  std_logic;\r\n    S_AXI_ARESETN " +
                    "                 : in  std_logic;\r\n    S_AXI_AWADDR                   : in  std_" +
                    "logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n    S_AXI_AWVALID                 " +
                    " : in  std_logic;\r\n    S_AXI_WDATA                    : in  std_logic_vector(C_S" +
                    "_AXI_DATA_WIDTH-1 downto 0);\r\n    S_AXI_WSTRB                    : in  std_logic" +
                    "_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);\r\n    S_AXI_WVALID                   " +
                    ": in  std_logic;\r\n    S_AXI_BREADY                   : in  std_logic;\r\n    S_AXI" +
                    "_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);" +
                    "\r\n    S_AXI_ARVALID                  : in  std_logic;\r\n    S_AXI_RREADY         " +
                    "          : in  std_logic;\r\n    S_AXI_ARREADY                  : out std_logic;\r" +
                    "\n    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 " +
                    "downto 0);\r\n    S_AXI_RRESP                    : out std_logic_vector(1 downto 0" +
                    ");\r\n    S_AXI_RVALID                   : out std_logic;\r\n    S_AXI_WREADY       " +
                    "            : out std_logic;\r\n    S_AXI_BRESP                    : out std_logic" +
                    "_vector(1 downto 0);\r\n    S_AXI_BVALID                   : out std_logic;\r\n    S" +
                    "_AXI_AWREADY                  : out std_logic;\r\n    m_axi_aclk                  " +
                    "   : in  std_logic;\r\n    m_axi_aresetn                  : in  std_logic;\r\n    md" +
                    "_error                       : out std_logic;\r\n    m_axi_arready                " +
                    "  : in  std_logic;\r\n    m_axi_arvalid                  : out std_logic;\r\n    m_a" +
                    "xi_araddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0" +
                    ");\r\n    m_axi_arlen                    : out std_logic_vector(7 downto 0);\r\n    " +
                    "m_axi_arsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_ar" +
                    "burst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_arprot    " +
                    "               : out std_logic_vector(2 downto 0);\r\n    m_axi_arcache           " +
                    "       : out std_logic_vector(3 downto 0);\r\n    m_axi_rready                   :" +
                    " out std_logic;\r\n    m_axi_rvalid                   : in  std_logic;\r\n    m_axi_" +
                    "rdata                    : in  std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r" +
                    "\n    m_axi_rresp                    : in  std_logic_vector(1 downto 0);\r\n    m_a" +
                    "xi_rlast                    : in  std_logic;\r\n    m_axi_awready                 " +
                    " : in  std_logic;\r\n    m_axi_awvalid                  : out std_logic;\r\n    m_ax" +
                    "i_awaddr                   : out std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0)" +
                    ";\r\n    m_axi_awlen                    : out std_logic_vector(7 downto 0);\r\n    m" +
                    "_axi_awsize                   : out std_logic_vector(2 downto 0);\r\n    m_axi_awb" +
                    "urst                  : out std_logic_vector(1 downto 0);\r\n    m_axi_awprot     " +
                    "              : out std_logic_vector(2 downto 0);\r\n    m_axi_awcache            " +
                    "      : out std_logic_vector(3 downto 0);\r\n    m_axi_wready                   : " +
                    "in  std_logic;\r\n    m_axi_wvalid                   : out std_logic;\r\n    m_axi_w" +
                    "data                    : out std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);\r\n" +
                    "    m_axi_wstrb                    : out std_logic_vector((C_M_AXI_DATA_WIDTH)/8" +
                    " - 1 downto 0);\r\n    m_axi_wlast                    : out std_logic;\r\n    m_axi_" +
                    "bready                   : out std_logic;\r\n    m_axi_bvalid                   : " +
                    "in  std_logic;\r\n    m_axi_bresp                    : in  std_logic_vector(1 down" +
                    "to 0)\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n\r\n  attri" +
                    "bute MAX_FANOUT : string;\r\n  attribute SIGIS : string;\r\n  attribute MAX_FANOUT o" +
                    "f S_AXI_ACLK       : signal is \"10000\";\r\n  attribute MAX_FANOUT of S_AXI_ARESETN" +
                    "       : signal is \"10000\";\r\n  attribute SIGIS of S_AXI_ACLK       : signal is \"" +
                    "Clk\";\r\n  attribute SIGIS of S_AXI_ARESETN       : signal is \"Rst\";\r\n\r\n  attribut" +
                    "e MAX_FANOUT of m_axi_aclk       : signal is \"10000\";\r\n  attribute MAX_FANOUT of" +
                    " m_axi_aresetn       : signal is \"10000\";\r\n  attribute SIGIS of m_axi_aclk      " +
                    " : signal is \"Clk\";\r\n  attribute SIGIS of m_axi_aresetn       : signal is \"Rst\";" +
                    "\r\nend entity ");
            
            #line 248 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n----------------------------------------------------------------------------" +
                    "--\r\n-- Architecture section\r\n---------------------------------------------------" +
                    "---------------------------\r\n\r\narchitecture IMP of ");
            
            #line 254 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(" is\r\n\r\n  constant USER_SLV_DWIDTH                : integer              := C_S_AX" +
                    "I_DATA_WIDTH;\r\n\r\n  constant IPIF_SLV_DWIDTH                : integer            " +
                    "  := C_S_AXI_DATA_WIDTH;\r\n\r\n  constant ZERO_ADDR_PAD                  : std_logi" +
                    "c_vector(0 to 31) := (others => \'0\');\r\n  constant USER_SLV_BASEADDR             " +
                    " : std_logic_vector     := C_BASEADDR or X\"00000000\";\r\n  constant USER_SLV_HIGHA" +
                    "DDR              : std_logic_vector     := C_BASEADDR or X\"000000FF\";\r\n  constan" +
                    "t USER_MST_BASEADDR              : std_logic_vector     := C_BASEADDR or X\"00000" +
                    "100\";\r\n  constant USER_MST_HIGHADDR              : std_logic_vector     := C_BAS" +
                    "EADDR or X\"000001FF\";\r\n\r\n  constant IPIF_ARD_ADDR_RANGE_ARRAY      : SLV64_ARRAY" +
                    "_TYPE     := \r\n    (\r\n      ZERO_ADDR_PAD & USER_SLV_BASEADDR,  -- user logic sl" +
                    "ave space base address\r\n      ZERO_ADDR_PAD & USER_SLV_HIGHADDR  -- user logic s" +
                    "lave space high address\r\n--      ,ZERO_ADDR_PAD & USER_MST_BASEADDR,  -- user lo" +
                    "gic master space base address\r\n--      ZERO_ADDR_PAD & USER_MST_HIGHADDR   -- us" +
                    "er logic master space high address\r\n    );\r\n\r\n  constant USER_SLV_NUM_REG       " +
                    "        : integer              := C_NUM_REG;\r\n  constant USER_MST_NUM_REG       " +
                    "        : integer              := 0;\r\n  constant USER_NUM_REG                   " +
                    ": integer              := USER_SLV_NUM_REG+USER_MST_NUM_REG;\r\n  constant TOTAL_I" +
                    "PIF_CE                  : integer              := USER_NUM_REG;\r\n\r\n  constant IP" +
                    "IF_ARD_NUM_CE_ARRAY          : INTEGER_ARRAY_TYPE   := \r\n    (\r\n      0  => (USE" +
                    "R_SLV_NUM_REG)           -- number of ce for user logic slave space\r\n--      ,1 " +
                    " =>  USER_MST_NUM_REG             -- no master space (number of ce for user logi" +
                    "c master space)\r\n    );\r\n\r\n  ------------------------------------------\r\n  -- Wi" +
                    "dth of the master address bus (32 only)\r\n  -------------------------------------" +
                    "-----\r\n  constant USER_MST_AWIDTH                : integer              := C_M_A" +
                    "XI_ADDR_WIDTH;\r\n\r\n  ------------------------------------------\r\n  -- Width of th" +
                    "e master data bus \r\n  ------------------------------------------\r\n  constant USE" +
                    "R_MST_DWIDTH                : integer              := C_M_AXI_DATA_WIDTH;\r\n\r\n  -" +
                    "-----------------------------------------\r\n  -- Width of data-bus going to user-" +
                    "logic\r\n  ------------------------------------------\r\n  constant USER_MST_NATIVE_" +
                    "DATA_WIDTH     : integer              := C_NATIVE_DATA_WIDTH;\r\n\r\n  -------------" +
                    "-----------------------------\r\n  -- Width of the master data bus (12-20 )\r\n  ---" +
                    "---------------------------------------\r\n  constant USER_MST_LENGTH_WIDTH       " +
                    "   : integer              := C_LENGTH_WIDTH;\r\n\r\n  ------------------------------" +
                    "------------\r\n  -- Index for CS/CE\r\n  ------------------------------------------" +
                    "\r\n  constant USER_SLV_CS_INDEX              : integer              := 0;\r\n  cons" +
                    "tant USER_SLV_CE_INDEX              : integer              := calc_start_ce_inde" +
                    "x(IPIF_ARD_NUM_CE_ARRAY, USER_SLV_CS_INDEX);\r\n  constant USER_MST_CS_INDEX      " +
                    "        : integer              := 1;\r\n  constant USER_MST_CE_INDEX              " +
                    ": integer              := calc_start_ce_index(IPIF_ARD_NUM_CE_ARRAY, USER_MST_CS" +
                    "_INDEX);\r\n\r\n  constant USER_CE_INDEX                  : integer              := " +
                    "USER_SLV_CE_INDEX;\r\n\r\n  ------------------------------------------\r\n  -- IP Inte" +
                    "rconnect (IPIC) signal declarations\r\n  -----------------------------------------" +
                    "-\r\n  signal ipif_Bus2IP_Clk                : std_logic;\r\n  signal ipif_Bus2IP_Re" +
                    "setn             : std_logic;\r\n  signal ipif_Bus2IP_Addr               : std_log" +
                    "ic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n  signal ipif_Bus2IP_RNW             " +
                    "   : std_logic;\r\n  signal ipif_Bus2IP_BE                 : std_logic_vector(IPIF" +
                    "_SLV_DWIDTH/8-1 downto 0);\r\n  signal ipif_Bus2IP_CS                 : std_logic_" +
                    "vector((IPIF_ARD_ADDR_RANGE_ARRAY\'LENGTH)/2-1 downto 0);\r\n  signal ipif_Bus2IP_R" +
                    "dCE               : std_logic_vector(calc_num_ce(IPIF_ARD_NUM_CE_ARRAY)-1 downto" +
                    " 0);\r\n  signal ipif_Bus2IP_WrCE               : std_logic_vector(calc_num_ce(IPI" +
                    "F_ARD_NUM_CE_ARRAY)-1 downto 0);\r\n  signal ipif_Bus2IP_Data               : std_" +
                    "logic_vector(IPIF_SLV_DWIDTH-1 downto 0);\r\n  signal ipif_IP2Bus_WrAck           " +
                    "   : std_logic;\r\n  signal ipif_IP2Bus_RdAck              : std_logic;\r\n  signal " +
                    "ipif_IP2Bus_Error              : std_logic;\r\n  signal ipif_IP2Bus_Data          " +
                    "     : std_logic_vector(IPIF_SLV_DWIDTH-1 downto 0);\r\n  signal ipif_ip2bus_mstrd" +
                    "_req          : std_logic;\r\n  signal ipif_ip2bus_mstwr_req          : std_logic;" +
                    "\r\n  signal ipif_ip2bus_mst_addr           : std_logic_vector(C_M_AXI_ADDR_WIDTH-" +
                    "1 downto 0);\r\n  signal ipif_ip2bus_mst_be             : std_logic_vector((C_NATI" +
                    "VE_DATA_WIDTH)/8-1 downto 0);\r\n  signal ipif_ip2bus_mst_length         : std_log" +
                    "ic_vector(C_LENGTH_WIDTH-1 downto 0);\r\n  signal ipif_ip2bus_mst_type           :" +
                    " std_logic;\r\n  signal ipif_ip2bus_mst_lock           : std_logic;\r\n  signal ipif" +
                    "_ip2bus_mst_reset          : std_logic;\r\n  signal ipif_bus2ip_mst_cmdack        " +
                    " : std_logic;\r\n  signal ipif_bus2ip_mst_cmplt          : std_logic;\r\n  signal ip" +
                    "if_bus2ip_mst_error          : std_logic;\r\n  signal ipif_bus2ip_mst_rearbitrate " +
                    "   : std_logic;\r\n  signal ipif_bus2ip_mst_cmd_timeout    : std_logic;\r\n  signal " +
                    "ipif_bus2ip_mstrd_d            : std_logic_vector(C_NATIVE_DATA_WIDTH-1 downto 0" +
                    ");\r\n  signal ipif_bus2ip_mstrd_rem          : std_logic_vector((C_NATIVE_DATA_WI" +
                    "DTH)/8-1 downto 0);\r\n  signal ipif_bus2ip_mstrd_sof_n        : std_logic;\r\n  sig" +
                    "nal ipif_bus2ip_mstrd_eof_n        : std_logic;\r\n  signal ipif_bus2ip_mstrd_src_" +
                    "rdy_n    : std_logic;\r\n  signal ipif_bus2ip_mstrd_src_dsc_n    : std_logic;\r\n  s" +
                    "ignal ipif_ip2bus_mstrd_dst_rdy_n    : std_logic;\r\n  signal ipif_ip2bus_mstrd_ds" +
                    "t_dsc_n    : std_logic;\r\n  signal ipif_ip2bus_mstwr_d            : std_logic_vec" +
                    "tor(C_NATIVE_DATA_WIDTH-1 downto 0);\r\n  signal ipif_ip2bus_mstwr_rem          : " +
                    "std_logic_vector((C_NATIVE_DATA_WIDTH)/8-1 downto 0);\r\n  signal ipif_ip2bus_mstw" +
                    "r_src_rdy_n    : std_logic;\r\n  signal ipif_ip2bus_mstwr_src_dsc_n    : std_logic" +
                    ";\r\n  signal ipif_ip2bus_mstwr_sof_n        : std_logic;\r\n  signal ipif_ip2bus_ms" +
                    "twr_eof_n        : std_logic;\r\n  signal ipif_bus2ip_mstwr_dst_rdy_n    : std_log" +
                    "ic;\r\n  signal ipif_bus2ip_mstwr_dst_dsc_n    : std_logic;\r\n  signal user_Bus2IP_" +
                    "RdCE               : std_logic_vector(USER_NUM_REG-1 downto 0);\r\n  signal user_B" +
                    "us2IP_WrCE               : std_logic_vector(USER_NUM_REG-1 downto 0);\r\n  signal " +
                    "user_IP2Bus_Data               : std_logic_vector(USER_SLV_DWIDTH-1 downto 0);\r\n" +
                    "  signal user_IP2Bus_RdAck              : std_logic;\r\n  signal user_IP2Bus_WrAck" +
                    "              : std_logic;\r\n  signal user_IP2Bus_Error              : std_logic;" +
                    "\r\n\r\nbegin\r\n\r\n  ------------------------------------------\r\n  -- instantiate axi_" +
                    "lite_ipif\r\n  ------------------------------------------\r\n  AXI_LITE_IPIF_I : ent" +
                    "ity axi_lite_ipif_v1_01_a.axi_lite_ipif\r\n    generic map\r\n    (\r\n      C_S_AXI_D" +
                    "ATA_WIDTH             => IPIF_SLV_DWIDTH,\r\n      C_S_AXI_ADDR_WIDTH             " +
                    "=> C_S_AXI_ADDR_WIDTH,\r\n      C_S_AXI_MIN_SIZE               => C_S_AXI_MIN_SIZE" +
                    ",\r\n      C_USE_WSTRB                    => C_USE_WSTRB,\r\n      C_DPHASE_TIMEOUT " +
                    "              => C_DPHASE_TIMEOUT,\r\n      C_ARD_ADDR_RANGE_ARRAY         => IPIF" +
                    "_ARD_ADDR_RANGE_ARRAY,\r\n      C_ARD_NUM_CE_ARRAY             => IPIF_ARD_NUM_CE_" +
                    "ARRAY,\r\n      C_FAMILY                       => C_FAMILY\r\n    )\r\n    port map\r\n " +
                    "   (\r\n      S_AXI_ACLK                     => S_AXI_ACLK,\r\n      S_AXI_ARESETN  " +
                    "                => S_AXI_ARESETN,\r\n      S_AXI_AWADDR                   => S_AXI" +
                    "_AWADDR,\r\n      S_AXI_AWVALID                  => S_AXI_AWVALID,\r\n      S_AXI_WD" +
                    "ATA                    => S_AXI_WDATA,\r\n      S_AXI_WSTRB                    => " +
                    "S_AXI_WSTRB,\r\n      S_AXI_WVALID                   => S_AXI_WVALID,\r\n      S_AXI" +
                    "_BREADY                   => S_AXI_BREADY,\r\n      S_AXI_ARADDR                  " +
                    " => S_AXI_ARADDR,\r\n      S_AXI_ARVALID                  => S_AXI_ARVALID,\r\n     " +
                    " S_AXI_RREADY                   => S_AXI_RREADY,\r\n      S_AXI_ARREADY           " +
                    "       => S_AXI_ARREADY,\r\n      S_AXI_RDATA                    => S_AXI_RDATA,\r\n" +
                    "      S_AXI_RRESP                    => S_AXI_RRESP,\r\n      S_AXI_RVALID        " +
                    "           => S_AXI_RVALID,\r\n      S_AXI_WREADY                   => S_AXI_WREAD" +
                    "Y,\r\n      S_AXI_BRESP                    => S_AXI_BRESP,\r\n      S_AXI_BVALID    " +
                    "               => S_AXI_BVALID,\r\n      S_AXI_AWREADY                  => S_AXI_A" +
                    "WREADY,\r\n      Bus2IP_Clk                     => ipif_Bus2IP_Clk,\r\n      Bus2IP_" +
                    "Resetn                  => ipif_Bus2IP_Resetn,\r\n      Bus2IP_Addr               " +
                    "     => ipif_Bus2IP_Addr,\r\n      Bus2IP_RNW                     => ipif_Bus2IP_R" +
                    "NW,\r\n      Bus2IP_BE                      => ipif_Bus2IP_BE,\r\n      Bus2IP_CS   " +
                    "                   => ipif_Bus2IP_CS,\r\n      Bus2IP_RdCE                    => i" +
                    "pif_Bus2IP_RdCE,\r\n      Bus2IP_WrCE                    => ipif_Bus2IP_WrCE,\r\n   " +
                    "   Bus2IP_Data                    => ipif_Bus2IP_Data,\r\n      IP2Bus_WrAck      " +
                    "             => ipif_IP2Bus_WrAck,\r\n      IP2Bus_RdAck                   => ipif" +
                    "_IP2Bus_RdAck,\r\n      IP2Bus_Error                   => ipif_IP2Bus_Error,\r\n    " +
                    "  IP2Bus_Data                    => ipif_IP2Bus_Data\r\n    );\r\n\r\n  --------------" +
                    "----------------------------\r\n  -- instantiate axi_master_burst\r\n  -------------" +
                    "-----------------------------\r\n  AXI_MASTER_BURST_I : entity axi_master_burst_v1" +
                    "_00_a.axi_master_burst\r\n    generic map\r\n    (\r\n      C_M_AXI_ADDR_WIDTH        " +
                    "     => C_M_AXI_ADDR_WIDTH,\r\n      C_M_AXI_DATA_WIDTH             => C_M_AXI_DAT" +
                    "A_WIDTH,\r\n      C_MAX_BURST_LEN                => C_MAX_BURST_LEN,\r\n      C_NATI" +
                    "VE_DATA_WIDTH            => C_NATIVE_DATA_WIDTH,\r\n      C_LENGTH_WIDTH          " +
                    "       => C_LENGTH_WIDTH,\r\n      C_ADDR_PIPE_DEPTH              => C_ADDR_PIPE_D" +
                    "EPTH,\r\n      C_FAMILY                       => C_FAMILY\r\n    )\r\n    port map\r\n  " +
                    "  (\r\n      m_axi_aclk                     => m_axi_aclk,\r\n      m_axi_aresetn   " +
                    "               => m_axi_aresetn,\r\n      md_error                       => md_err" +
                    "or,\r\n      m_axi_arready                  => m_axi_arready,\r\n      m_axi_arvalid" +
                    "                  => m_axi_arvalid,\r\n      m_axi_araddr                   => m_a" +
                    "xi_araddr,\r\n      m_axi_arlen                    => m_axi_arlen,\r\n      m_axi_ar" +
                    "size                   => m_axi_arsize,\r\n      m_axi_arburst                  =>" +
                    " m_axi_arburst,\r\n      m_axi_arprot                   => m_axi_arprot,\r\n      m_" +
                    "axi_arcache                  => m_axi_arcache,\r\n      m_axi_rready              " +
                    "     => m_axi_rready,\r\n      m_axi_rvalid                   => m_axi_rvalid,\r\n  " +
                    "    m_axi_rdata                    => m_axi_rdata,\r\n      m_axi_rresp           " +
                    "         => m_axi_rresp,\r\n      m_axi_rlast                    => m_axi_rlast,\r\n" +
                    "      m_axi_awready                  => m_axi_awready,\r\n      m_axi_awvalid     " +
                    "             => m_axi_awvalid,\r\n      m_axi_awaddr                   => m_axi_aw" +
                    "addr,\r\n      m_axi_awlen                    => m_axi_awlen,\r\n      m_axi_awsize " +
                    "                  => m_axi_awsize,\r\n      m_axi_awburst                  => m_ax" +
                    "i_awburst,\r\n      m_axi_awprot                   => m_axi_awprot,\r\n      m_axi_a" +
                    "wcache                  => m_axi_awcache,\r\n      m_axi_wready                   " +
                    "=> m_axi_wready,\r\n      m_axi_wvalid                   => m_axi_wvalid,\r\n      m" +
                    "_axi_wdata                    => m_axi_wdata,\r\n      m_axi_wstrb                " +
                    "    => m_axi_wstrb,\r\n      m_axi_wlast                    => m_axi_wlast,\r\n     " +
                    " m_axi_bready                   => m_axi_bready,\r\n      m_axi_bvalid            " +
                    "       => m_axi_bvalid,\r\n      m_axi_bresp                    => m_axi_bresp,\r\n " +
                    "     ip2bus_mstrd_req               => ipif_ip2bus_mstrd_req,\r\n      ip2bus_mstw" +
                    "r_req               => ipif_ip2bus_mstwr_req,\r\n      ip2bus_mst_addr            " +
                    "    => ipif_ip2bus_mst_addr,\r\n      ip2bus_mst_be                  => ipif_ip2bu" +
                    "s_mst_be,\r\n      ip2bus_mst_length              => ipif_ip2bus_mst_length,\r\n    " +
                    "  ip2bus_mst_type                => ipif_ip2bus_mst_type,\r\n      ip2bus_mst_lock" +
                    "                => ipif_ip2bus_mst_lock,\r\n      ip2bus_mst_reset               =" +
                    "> ipif_ip2bus_mst_reset,\r\n      bus2ip_mst_cmdack              => ipif_bus2ip_ms" +
                    "t_cmdack,\r\n      bus2ip_mst_cmplt               => ipif_bus2ip_mst_cmplt,\r\n     " +
                    " bus2ip_mst_error               => ipif_bus2ip_mst_error,\r\n      bus2ip_mst_rear" +
                    "bitrate         => ipif_bus2ip_mst_rearbitrate,\r\n      bus2ip_mst_cmd_timeout   " +
                    "      => ipif_bus2ip_mst_cmd_timeout,\r\n      bus2ip_mstrd_d                 => i" +
                    "pif_bus2ip_mstrd_d,\r\n      bus2ip_mstrd_rem               => ipif_bus2ip_mstrd_r" +
                    "em,\r\n      bus2ip_mstrd_sof_n             => ipif_bus2ip_mstrd_sof_n,\r\n      bus" +
                    "2ip_mstrd_eof_n             => ipif_bus2ip_mstrd_eof_n,\r\n      bus2ip_mstrd_src_" +
                    "rdy_n         => ipif_bus2ip_mstrd_src_rdy_n,\r\n      bus2ip_mstrd_src_dsc_n     " +
                    "    => ipif_bus2ip_mstrd_src_dsc_n,\r\n      ip2bus_mstrd_dst_rdy_n         => ipi" +
                    "f_ip2bus_mstrd_dst_rdy_n,\r\n      ip2bus_mstrd_dst_dsc_n         => ipif_ip2bus_m" +
                    "strd_dst_dsc_n,\r\n      ip2bus_mstwr_d                 => ipif_ip2bus_mstwr_d,\r\n " +
                    "     ip2bus_mstwr_rem               => ipif_ip2bus_mstwr_rem,\r\n      ip2bus_mstw" +
                    "r_src_rdy_n         => ipif_ip2bus_mstwr_src_rdy_n,\r\n      ip2bus_mstwr_src_dsc_" +
                    "n         => ipif_ip2bus_mstwr_src_dsc_n,\r\n      ip2bus_mstwr_sof_n             " +
                    "=> ipif_ip2bus_mstwr_sof_n,\r\n      ip2bus_mstwr_eof_n             => ipif_ip2bus" +
                    "_mstwr_eof_n,\r\n      bus2ip_mstwr_dst_rdy_n         => ipif_bus2ip_mstwr_dst_rdy" +
                    "_n,\r\n      bus2ip_mstwr_dst_dsc_n         => ipif_bus2ip_mstwr_dst_dsc_n\r\n    );" +
                    "\r\n\r\n  ------------------------------------------\r\n  -- instantiate User Logic\r\n " +
                    " ------------------------------------------\r\n  USER_LOGIC_I : entity ");
            
            #line 502 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Master.LibraryName));
            
            #line default
            #line hidden
            this.Write(".user_logic\r\n    port map\r\n    (\r\n      -- MAP USER PORTS BELOW THIS LINE -------" +
                    "-----------\r\n      --USER ports mapped here\r\n");
            
            #line 507 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXIMasterImp.tt"

    PushIndent("    ");
    foreach (var port in Master.UserPorts)
        WriteLine(port.Name + " => " + port.Name + ",");
    PopIndent();
 
            
            #line default
            #line hidden
            this.Write("      -- MAP USER PORTS ABOVE THIS LINE ------------------\r\n\r\n      Bus2IP_Clk   " +
                    "                  => ipif_Bus2IP_Clk,\r\n      Bus2IP_Resetn                  => i" +
                    "pif_Bus2IP_Resetn,\r\n      Bus2IP_Data                    => ipif_Bus2IP_Data,\r\n " +
                    "     Bus2IP_BE                      => ipif_Bus2IP_BE,\r\n      Bus2IP_RdCE       " +
                    "             => user_Bus2IP_RdCE,\r\n      Bus2IP_WrCE                    => user_" +
                    "Bus2IP_WrCE,\r\n      IP2Bus_Data                    => user_IP2Bus_Data,\r\n      I" +
                    "P2Bus_RdAck                   => user_IP2Bus_RdAck,\r\n      IP2Bus_WrAck         " +
                    "          => user_IP2Bus_WrAck,\r\n      IP2Bus_Error                   => user_IP" +
                    "2Bus_Error,\r\n      ip2bus_mstrd_req               => ipif_ip2bus_mstrd_req,\r\n   " +
                    "   ip2bus_mstwr_req               => ipif_ip2bus_mstwr_req,\r\n      ip2bus_mst_ad" +
                    "dr                => ipif_ip2bus_mst_addr,\r\n      ip2bus_mst_be                 " +
                    " => ipif_ip2bus_mst_be,\r\n      ip2bus_mst_length              => ipif_ip2bus_mst" +
                    "_length,\r\n      ip2bus_mst_type                => ipif_ip2bus_mst_type,\r\n      i" +
                    "p2bus_mst_lock                => ipif_ip2bus_mst_lock,\r\n      ip2bus_mst_reset  " +
                    "             => ipif_ip2bus_mst_reset,\r\n      bus2ip_mst_cmdack              => " +
                    "ipif_bus2ip_mst_cmdack,\r\n      bus2ip_mst_cmplt               => ipif_bus2ip_mst" +
                    "_cmplt,\r\n      bus2ip_mst_error               => ipif_bus2ip_mst_error,\r\n      b" +
                    "us2ip_mst_rearbitrate         => ipif_bus2ip_mst_rearbitrate,\r\n      bus2ip_mst_" +
                    "cmd_timeout         => ipif_bus2ip_mst_cmd_timeout,\r\n      bus2ip_mstrd_d       " +
                    "          => ipif_bus2ip_mstrd_d,\r\n      bus2ip_mstrd_rem               => ipif_" +
                    "bus2ip_mstrd_rem,\r\n      bus2ip_mstrd_sof_n             => ipif_bus2ip_mstrd_sof" +
                    "_n,\r\n      bus2ip_mstrd_eof_n             => ipif_bus2ip_mstrd_eof_n,\r\n      bus" +
                    "2ip_mstrd_src_rdy_n         => ipif_bus2ip_mstrd_src_rdy_n,\r\n      bus2ip_mstrd_" +
                    "src_dsc_n         => ipif_bus2ip_mstrd_src_dsc_n,\r\n      ip2bus_mstrd_dst_rdy_n " +
                    "        => ipif_ip2bus_mstrd_dst_rdy_n,\r\n      ip2bus_mstrd_dst_dsc_n         =>" +
                    " ipif_ip2bus_mstrd_dst_dsc_n,\r\n      ip2bus_mstwr_d                 => ipif_ip2b" +
                    "us_mstwr_d,\r\n      ip2bus_mstwr_rem               => ipif_ip2bus_mstwr_rem,\r\n   " +
                    "   ip2bus_mstwr_src_rdy_n         => ipif_ip2bus_mstwr_src_rdy_n,\r\n      ip2bus_" +
                    "mstwr_src_dsc_n         => ipif_ip2bus_mstwr_src_dsc_n,\r\n      ip2bus_mstwr_sof_" +
                    "n             => ipif_ip2bus_mstwr_sof_n,\r\n      ip2bus_mstwr_eof_n             " +
                    "=> ipif_ip2bus_mstwr_eof_n,\r\n      bus2ip_mstwr_dst_rdy_n         => ipif_bus2ip" +
                    "_mstwr_dst_rdy_n,\r\n      bus2ip_mstwr_dst_dsc_n         => ipif_bus2ip_mstwr_dst" +
                    "_dsc_n\r\n    );\r\n\r\n  ------------------------------------------\r\n  -- connect int" +
                    "ernal signals\r\n  ------------------------------------------\r\n  ipif_IP2Bus_Data " +
                    "<= user_IP2Bus_Data;\r\n\r\n  ipif_IP2Bus_WrAck <= user_IP2Bus_WrAck;\r\n  ipif_IP2Bus" +
                    "_RdAck <= user_IP2Bus_RdAck;\r\n  ipif_IP2Bus_Error <= user_IP2Bus_Error;\r\n\r\n  use" +
                    "r_Bus2IP_RdCE(USER_SLV_NUM_REG-1 downto 0) <= ipif_Bus2IP_RdCE(TOTAL_IPIF_CE -US" +
                    "ER_SLV_CE_INDEX -1 downto TOTAL_IPIF_CE - USER_SLV_CE_INDEX -USER_SLV_NUM_REG);\r" +
                    "\n  user_Bus2IP_WrCE(USER_SLV_NUM_REG-1 downto 0) <= ipif_Bus2IP_WrCE(TOTAL_IPIF_" +
                    "CE -USER_SLV_CE_INDEX -1 downto TOTAL_IPIF_CE - USER_SLV_CE_INDEX -USER_SLV_NUM_" +
                    "REG);\r\n  user_Bus2IP_RdCE(USER_NUM_REG -1 downto USER_NUM_REG - USER_MST_NUM_REG" +
                    ") <= ipif_Bus2IP_RdCE(TOTAL_IPIF_CE - USER_MST_CE_INDEX -1 downto TOTAL_IPIF_CE " +
                    "- USER_MST_CE_INDEX -USER_MST_NUM_REG);\r\n  user_Bus2IP_WrCE(USER_NUM_REG -1 down" +
                    "to USER_NUM_REG - USER_MST_NUM_REG) <= ipif_Bus2IP_WrCE(TOTAL_IPIF_CE - USER_MST" +
                    "_CE_INDEX -1 downto TOTAL_IPIF_CE - USER_MST_CE_INDEX -USER_MST_NUM_REG);\r\n\r\nend" +
                    " IMP;\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AXIMasterImpBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
