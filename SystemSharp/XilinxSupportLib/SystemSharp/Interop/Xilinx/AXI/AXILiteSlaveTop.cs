// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XilinxSupportLib.SystemSharp.Interop.Xilinx.AXI
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AXILiteSlaveTop : AXILiteSlaveTopBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n------------------------------------------------------------------------------\r" +
                    "\n-- ");
            
            #line 7 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.TopEntityName));
            
            #line default
            #line hidden
            this.Write(@".vhd - entity/architecture pair
------------------------------------------------------------------------------
-- IMPORTANT:
-- DO NOT MODIFY THIS FILE EXCEPT IN THE DESIGNATED SECTIONS.
--
-- SEARCH FOR --USER TO DETERMINE WHERE CHANGES ARE ALLOWED.
--
-- TYPICALLY, THE ONLY ACCEPTABLE CHANGES INVOLVE ADDING NEW
-- PORTS AND GENERICS THAT GET PASSED THROUGH TO THE INSTANTIATION
-- OF THE USER_LOGIC ENTITY.
------------------------------------------------------------------------------
-- Filename:          ");
            
            #line 18 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.TopFileName));
            
            #line default
            #line hidden
            this.Write(".vhd\r\n-- Version:           ");
            
            #line 19 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.Version));
            
            #line default
            #line hidden
            this.Write("\r\n-- Description:       Top level design, instantiates library components and use" +
                    "r logic.\r\n-- Date:              ");
            
            #line 21 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.CreationDate));
            
            #line default
            #line hidden
            this.Write(" (by System#)\r\n-- VHDL Standard:     VHDL\'93\r\n-----------------------------------" +
                    "-------------------------------------------\r\n-- Naming Conventions:\r\n--   active" +
                    " low signals:                    \"*_n\"\r\n--   clock signals:                     " +
                    "    \"clk\", \"clk_div#\", \"clk_#x\"\r\n--   reset signals:                         \"rs" +
                    "t\", \"rst_n\"\r\n--   generics:                              \"C_*\"\r\n--   user define" +
                    "d types:                    \"*_TYPE\"\r\n--   state machine next state:            " +
                    "  \"*_ns\"\r\n--   state machine current state:           \"*_cs\"\r\n--   combinatorial" +
                    " signals:                 \"*_com\"\r\n--   pipelined or register delay signals:   \"" +
                    "*_d#\"\r\n--   counter signals:                       \"*cnt*\"\r\n--   clock enable si" +
                    "gnals:                  \"*_ce\"\r\n--   internal version of output port:       \"*_i" +
                    "\"\r\n--   device pins:                           \"*_pin\"\r\n--   ports:             " +
                    "                    \"- Names begin with Uppercase\"\r\n--   processes:             " +
                    "                \"*_PROCESS\"\r\n--   component instantiations:              \"<ENTIT" +
                    "Y_>I_<FUNC>\"\r\n------------------------------------------------------------------" +
                    "------------\r\n\r\nlibrary ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.std_logic_" +
                    "arith.all;\r\nuse ieee.std_logic_unsigned.all;\r\n\r\n--------------------------------" +
                    "----------------------------------------------\r\n-- Entity section\r\n-------------" +
                    "-----------------------------------------------------------------\r\n-- Definition" +
                    " of Generics:\r\n--   C_S_AXI_DATA_WIDTH           -- \r\n--   C_S_AXI_ADDR_WIDTH   " +
                    "        -- \r\n--   C_S_AXI_MIN_SIZE             -- \r\n--   C_USE_WSTRB            " +
                    "      -- \r\n--   C_DPHASE_TIMEOUT             -- \r\n--   C_BASEADDR               " +
                    "    -- AXI4LITE slave: base address\r\n--   C_HIGHADDR                   -- AXI4LI" +
                    "TE slave: high address\r\n--   C_FAMILY                     -- \r\n--   C_NUM_REG   " +
                    "                 -- Number of software accessible registers\r\n--   C_NUM_MEM     " +
                    "               -- Number of address-ranges\r\n--   C_SLV_AWIDTH                 --" +
                    " Slave interface address bus width\r\n--   C_SLV_DWIDTH                 -- Slave i" +
                    "nterface data bus width\r\n--\r\n-- Definition of Ports:\r\n--   S_AXI_ACLK           " +
                    "        -- \r\n--   S_AXI_ARESETN                -- \r\n--   S_AXI_AWADDR           " +
                    "      -- \r\n--   S_AXI_AWVALID                -- \r\n--   S_AXI_WDATA              " +
                    "    -- \r\n--   S_AXI_WSTRB                  -- \r\n--   S_AXI_WVALID               " +
                    "  -- \r\n--   S_AXI_BREADY                 -- \r\n--   S_AXI_ARADDR                 " +
                    "-- \r\n--   S_AXI_ARVALID                -- \r\n--   S_AXI_RREADY                 --" +
                    " \r\n--   S_AXI_ARREADY                -- \r\n--   S_AXI_RDATA                  -- \r" +
                    "\n--   S_AXI_RRESP                  -- \r\n--   S_AXI_RVALID                 -- \r\n-" +
                    "-   S_AXI_WREADY                 -- \r\n--   S_AXI_BRESP                  -- \r\n-- " +
                    "  S_AXI_BVALID                 -- \r\n--   S_AXI_AWREADY                -- \r\n-----" +
                    "-------------------------------------------------------------------------\r\n\r\nent" +
                    "ity ");
            
            #line 87 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.TopEntityName));
            
            #line default
            #line hidden
            this.Write(@" is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_S_AXI_DATA_WIDTH             : integer              := ");
            
            #line 96 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 97 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 98 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 99 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 100 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 101 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 102 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 103 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 104 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 105 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 106 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 107 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVDWidth));
            
            #line default
            #line hidden
            this.Write("\r\n    -- DO NOT EDIT ABOVE THIS LINE ---------------------\r\n  );\r\n  port\r\n  (\r\n  " +
                    "  -- ADD USER PORTS BELOW THIS LINE ------------------\r\n    --USER ports added h" +
                    "ere\r\n    -- ADD USER PORTS ABOVE THIS LINE ------------------\r\n\r\n    -- DO NOT E" +
                    "DIT BELOW THIS LINE ---------------------\r\n    -- Bus protocol ports, do not add" +
                    " to or delete\r\n    S_AXI_ACLK                     : in  std_logic;\r\n    S_AXI_AR" +
                    "ESETN                  : in  std_logic;\r\n    S_AXI_AWADDR                   : in" +
                    "  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);\r\n    S_AXI_AWVALID           " +
                    "       : in  std_logic;\r\n    S_AXI_WDATA                    : in  std_logic_vect" +
                    "or(C_S_AXI_DATA_WIDTH-1 downto 0);\r\n    S_AXI_WSTRB                    : in  std" +
                    "_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);\r\n    S_AXI_WVALID             " +
                    "      : in  std_logic;\r\n    S_AXI_BREADY                   : in  std_logic;\r\n   " +
                    " S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 down" +
                    "to 0);\r\n    S_AXI_ARVALID                  : in  std_logic;\r\n    S_AXI_RREADY   " +
                    "                : in  std_logic;\r\n    S_AXI_ARREADY                  : out std_l" +
                    "ogic;\r\n    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WI" +
                    "DTH-1 downto 0);\r\n    S_AXI_RRESP                    : out std_logic_vector(1 do" +
                    "wnto 0);\r\n    S_AXI_RVALID                   : out std_logic;\r\n    S_AXI_WREADY " +
                    "                  : out std_logic;\r\n    S_AXI_BRESP                    : out std" +
                    "_logic_vector(1 downto 0);\r\n    S_AXI_BVALID                   : out std_logic;\r" +
                    "\n    S_AXI_AWREADY                  : out std_logic\r\n    -- DO NOT EDIT ABOVE TH" +
                    "IS LINE ---------------------\r\n  );\r\n\r\n  attribute MAX_FANOUT : string;\r\n  attri" +
                    "bute SIGIS : string;\r\n  attribute MAX_FANOUT of S_AXI_ACLK       : signal is \"10" +
                    "000\";\r\n  attribute MAX_FANOUT of S_AXI_ARESETN       : signal is \"10000\";\r\n  att" +
                    "ribute SIGIS of S_AXI_ACLK       : signal is \"Clk\";\r\n  attribute SIGIS of S_AXI_" +
                    "ARESETN       : signal is \"Rst\";\r\nend entity ");
            
            #line 146 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.TopEntityName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n----------------------------------------------------------------------------" +
                    "--\r\n-- Architecture section\r\n---------------------------------------------------" +
                    "---------------------------\r\n\r\narchitecture IMP of ");
            
            #line 152 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.TopEntityName));
            
            #line default
            #line hidden
            this.Write(" is\r\n  component ");
            
            #line 153 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write(" is\r\n  generic\r\n  (\r\n    C_S_AXI_DATA_WIDTH             : integer              :=" +
                    " ");
            
            #line 156 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIDataWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_ADDR_WIDTH             : integer              := ");
            
            #line 157 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIAddrWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_S_AXI_MIN_SIZE               : std_logic_vector     := X\"");
            
            #line 158 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.AXIMinSize));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_USE_WSTRB                    : integer              := ");
            
            #line 159 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.UseWRSTRB));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_DPHASE_TIMEOUT               : integer              := ");
            
            #line 160 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DPhaseTimeout));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_BASEADDR                     : std_logic_vector     := X\"");
            
            #line 161 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.BaseAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_HIGHADDR                     : std_logic_vector     := X\"");
            
            #line 162 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.HighAddr));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_FAMILY                       : string               := \"");
            
            #line 163 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.DeviceFamily));
            
            #line default
            #line hidden
            this.Write("\";\r\n    C_NUM_REG                      : integer              := ");
            
            #line 164 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumRegs));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_NUM_MEM                      : integer              := ");
            
            #line 165 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.NumMem));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_AWIDTH                   : integer              := ");
            
            #line 166 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVAWidth));
            
            #line default
            #line hidden
            this.Write(";\r\n    C_SLV_DWIDTH                   : integer              := ");
            
            #line 167 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.SLVDWidth));
            
            #line default
            #line hidden
            this.Write(@"
  );
  port
  (
    S_AXI_ACLK                     : in  std_logic;
    S_AXI_ARESETN                  : in  std_logic;
    S_AXI_AWADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
    S_AXI_AWVALID                  : in  std_logic;
    S_AXI_WDATA                    : in  std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
    S_AXI_WSTRB                    : in  std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
    S_AXI_WVALID                   : in  std_logic;
    S_AXI_BREADY                   : in  std_logic;
    S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
    S_AXI_ARVALID                  : in  std_logic;
    S_AXI_RREADY                   : in  std_logic;
    S_AXI_ARREADY                  : out std_logic;
    S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
    S_AXI_RRESP                    : out std_logic_vector(1 downto 0);
    S_AXI_RVALID                   : out std_logic;
    S_AXI_WREADY                   : out std_logic;
    S_AXI_BRESP                    : out std_logic_vector(1 downto 0);
    S_AXI_BVALID                   : out std_logic;
    S_AXI_AWREADY                  : out std_logic
  );
  end component;
begin

  ------------------------------------------
  -- instantiate implementation
  ------------------------------------------
  SLAVE_IMP_I : ");
            
            #line 197 "D:\FZI\Diplomarbeit\system#aw\SystemSharp\XilinxSupportLib\SystemSharp\Interop\Xilinx\AXI\AXILiteSlaveTop.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Slave.ImpEntityName));
            
            #line default
            #line hidden
            this.Write("\r\n    generic map\r\n    (\r\n        C_S_AXI_DATA_WIDTH             => C_S_AXI_DATA_" +
                    "WIDTH,\r\n        C_S_AXI_ADDR_WIDTH             => C_S_AXI_ADDR_WIDTH,\r\n        C" +
                    "_S_AXI_MIN_SIZE               => C_S_AXI_MIN_SIZE,\r\n        C_USE_WSTRB         " +
                    "           => C_USE_WSTRB,\r\n        C_DPHASE_TIMEOUT               => C_DPHASE_T" +
                    "IMEOUT,\r\n        C_BASEADDR                     => C_BASEADDR,\r\n        C_HIGHAD" +
                    "DR                     => C_HIGHADDR,\r\n        C_FAMILY                       =>" +
                    " C_FAMILY,\r\n        C_NUM_REG                      => C_NUM_REG,\r\n        C_NUM_" +
                    "MEM                      => C_NUM_MEM,\r\n        C_SLV_AWIDTH                   =" +
                    "> C_SLV_AWIDTH,\r\n        C_SLV_DWIDTH                   => C_SLV_DWIDTH\r\n    )\r\n" +
                    "    port map\r\n    (\r\n      S_AXI_ACLK                     => S_AXI_ACLK,\r\n      " +
                    "S_AXI_ARESETN                  => S_AXI_ARESETN,\r\n      S_AXI_AWADDR            " +
                    "       => S_AXI_AWADDR,\r\n      S_AXI_AWVALID                  => S_AXI_AWVALID,\r" +
                    "\n      S_AXI_WDATA                    => S_AXI_WDATA,\r\n      S_AXI_WSTRB        " +
                    "            => S_AXI_WSTRB,\r\n      S_AXI_WVALID                   => S_AXI_WVALI" +
                    "D,\r\n      S_AXI_BREADY                   => S_AXI_BREADY,\r\n      S_AXI_ARADDR   " +
                    "                => S_AXI_ARADDR,\r\n      S_AXI_ARVALID                  => S_AXI_" +
                    "ARVALID,\r\n      S_AXI_RREADY                   => S_AXI_RREADY,\r\n      S_AXI_ARR" +
                    "EADY                  => S_AXI_ARREADY,\r\n      S_AXI_RDATA                    =>" +
                    " S_AXI_RDATA,\r\n      S_AXI_RRESP                    => S_AXI_RRESP,\r\n      S_AXI" +
                    "_RVALID                   => S_AXI_RVALID,\r\n      S_AXI_WREADY                  " +
                    " => S_AXI_WREADY,\r\n      S_AXI_BRESP                    => S_AXI_BRESP,\r\n      S" +
                    "_AXI_BVALID                   => S_AXI_BVALID,\r\n      S_AXI_AWREADY             " +
                    "     => S_AXI_AWREADY\r\n    );\r\nend IMP;\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AXILiteSlaveTopBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
